{"version":3,"file":"static/js/775.e1c89d8d.chunk.js","mappings":"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","sources":["app/components/change-background-button/change-background-button.tsx","app/components/props-section/MessageChild.tsx","app/components/props-section/MessageParent.tsx","app/components/timer/timer.tsx","app/components/theme-switcher/ThemeSwitcher.tsx","app/components/counter/counter.tsx","app/components/use-memo-hook/use-memo-hook.tsx","app/components/day-night/DayNight.tsx","app/App.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst getRandomColor = () =>\r\n  `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\r\n\r\nexport class ChangeBackgroundButton extends React.Component {\r\n  state = {\r\n    bgColor: '#ffffff',\r\n  };\r\n\r\n  handleChangeColor = () => {\r\n    this.setState({ bgColor: getRandomColor() });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ backgroundColor: this.state.bgColor, padding: '20px' }}>\r\n        <button onClick={this.handleChangeColor}>\r\n          Change Background Color\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\ninterface MessageChildProps {\r\n  message: string;\r\n}\r\n\r\nexport const MessageChild: React.FC<MessageChildProps> = ({ message }) => (\r\n  <div>\r\n    <h3>Child received: {message}</h3>\r\n  </div>\r\n);","import React, { useState, useCallback } from 'react';\r\nimport { MessageChild } from './MessageChild.tsx';\r\nimport './MessageParent.scss';\r\n\r\nconst hasDigitsRegexp: RegExp = /\\d+/;\r\n\r\nexport const MessageParent: React.FC = () => {\r\n  const [input, setInput] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  const handleInputChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = e.target.value;\r\n      setInput(newValue);\r\n      validateInput(newValue);\r\n    },\r\n    []\r\n  );\r\n  \r\n  const validateInput = useCallback((value: string) => {\r\n    const trimmedValue = value.trim();\r\n    const hasDigits = hasDigitsRegexp.test(trimmedValue);\r\n\r\n    setIsValid(!hasDigits);\r\n  }, []);\r\n\r\n  const handleButtonClick = useCallback(\r\n    () => {\r\n      if (isValid && isTouched) {\r\n        setMessage(input);\r\n        setShowError(false);\r\n      } else {\r\n        setShowError(true);\r\n      }\r\n    },\r\n    [input, isTouched, isValid]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Type your message\"\r\n        onBlur={() => setIsTouched(true)}\r\n      />\r\n      <button onClick={handleButtonClick}>Send to Child</button>\r\n      {showError && !isValid && <p className='error'>Input cannot contain digits!</p>}\r\n      {message && <MessageChild message={message} />}\r\n    </>\r\n  );\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport const Timer = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const getPluralForm = (seconds: number) => {\r\n    if (seconds === 0) return '';\r\n    if (seconds === 1) return 'у';\r\n    if (seconds > 1 && seconds < 5) return 'ы';\r\n    return 'аў';\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"Таймер запушчаны!\");\r\n    const interval = setInterval(() => {\r\n      setSeconds((prevSeconds) => prevSeconds + 1);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      console.log(\"Таймер спынены!\");\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>Ваш сайт працуе: {seconds} секунд{ getPluralForm(seconds )}</h2>\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport { useTheme } from '../../contexts/ThemeContext.tsx';\r\n\r\nexport const ThemeSwitcher: React.FC = () => {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <div>\r\n      <span>Current theme: {theme}</span>\r\n      <button onClick={toggleTheme}>Toggle Theme</button>\r\n    </div>\r\n  );\r\n};","import { useReducer, useState } from 'react';\r\n\r\ninterface CounterState {\r\n  count: number;\r\n}\r\n\r\ninterface CounterAction {\r\n  type: 'increment' | 'decrement' | 'reset';\r\n}\r\n\r\nenum CounterActionType {\r\n  Increment = 'increment',\r\n  Decrement = 'decrement',\r\n  Reset = 'reset',\r\n}\r\n\r\nconst BASE_FONT_SIZE = 16;\r\n\r\nconst counterReducer = (state: CounterState, action: CounterAction) => {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    case 'reset':\r\n      return { count: 0 };\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nconst Counter = () => {\r\n  const initialState: CounterState = { count: 0 };\r\n  const [state, dispatch] = useReducer(counterReducer, initialState);\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n      <h2>Лічыльнік: <span style={{ fontSize: `${BASE_FONT_SIZE + state.count}px` }}>{state.count}</span></h2>\r\n      <button onClick={() => dispatch({ type: CounterActionType.Increment })}>Павялічыць</button>\r\n      <button onClick={() => dispatch({ type: CounterActionType.Decrement })}>Паменшыць</button>\r\n      <button onClick={() => dispatch({ type: CounterActionType.Reset })}>Скінуць</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;","import { useMemo, useState } from \"react\";\r\n\r\nexport const UseMemoHook = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [otherCount, setOtherCount] = useState(0);\r\n\r\n  // Вылічваем значэнне толькі калі `count` змяняецца\r\n  const memoizedValue = useMemo(() => {\r\n    console.log(\"Складанае вылічэнне...\");\r\n    return count * 2; // Тут можа быць складаная аперацыя\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Прыклад з useMemo</h2>\r\n      <p>Тэарэтычна: {memoizedValue}</p>\r\n      <button onClick={() => setCount(count + 1)}>Змяніць count: {count}</button>\r\n      <button onClick={() => setOtherCount(otherCount + 1)}>\r\n        Змяніць otherCount: {otherCount}\r\n      </button>\r\n    </div>\r\n  );\r\n};","import React, { useEffect } from 'react';\r\n\r\ninterface DayNightProps {\r\n  dayMessage: string;\r\n  nightMessage: string;\r\n}\r\n\r\nexport const DayNight: React.FC<DayNightProps> = ({ dayMessage, nightMessage }) => {\r\n  const [isDay, setIsDay] = React.useState(true);\r\n  \r\n  useEffect(() => {\r\n    const hour = new Date().getHours();\r\n    setIsDay(hour >= 6 && hour < 18);\r\n  }, []);\r\n\r\n  return <span>{isDay ? dayMessage : nightMessage}</span>;\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.scss';\nimport { ChangeBackgroundButton } from './components/change-background-button/change-background-button.tsx';\nimport { MessageParent } from './components/props-section/MessageParent.tsx';\nimport { Timer } from './components/timer/timer.tsx';\nimport { useTheme } from './contexts/ThemeContext.tsx';\nimport { ThemeSwitcher } from './components/theme-switcher/ThemeSwitcher.tsx';\nimport Counter from './components/counter/counter.tsx';\nimport { UseMemoHook } from './components/use-memo-hook/use-memo-hook.tsx';\nimport { DayNight } from './components/day-night/DayNight.tsx';\nimport { useNavigate } from 'react-router-dom';\n\nfunction App() {\n  const [tasks, setTasks] = useState<string[]>([]);\n  const [input, setInput] = useState<string>('');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const navigate = useNavigate();\n  const { theme } = useTheme();\n  \n  const addTask = () => {\n    if (input.trim()) {\n      setTasks([...tasks, input]);\n      setInput('');\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setInput(e.target.value);\n  \n  const removeTask = (index: number) => setTasks(tasks.filter((_, i) => i !== index));\n  const onGoToContactsClick = () => navigate('/contacts');\n\n  useEffect(() => {\n    console.log(`Current theme: ${theme}`);\n  }, [theme]);\n\n  useEffect(() => inputRef?.current?.focus(), []);\n\n  return (\n    <div className={`App ${theme}`}>\n      <header className=\"App-header\">\n        <h2>To-Do List</h2>\n        <input\n          type=\"text\"\n          ref={inputRef}\n          value={input}\n          onChange={handleInputChange}\n          placeholder=\"Add a new task\"\n        />\n        <button onClick={addTask}>Add</button>\n        <ul>\n          {tasks.map((task, idx) => (\n            <li key={idx}>\n              {task}\n              <button onClick={() => removeTask(idx)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </header>\n      <section>\n        <h2>Change Background Color</h2>\n        <ChangeBackgroundButton />\n      </section>\n      <section>\n        <h2>Props from parent to child</h2>\n        <MessageParent />\n      </section>\n      <section>\n        <h2>Timer example:</h2>\n        <Timer />\n      </section>\n      <section>\n        <h2>Theme Switcher Example</h2>\n        <ThemeSwitcher />\n      </section>\n      <section>\n        <h2>Прыклад лічыльніка</h2>\n        <Counter />\n      </section>\n      <section>\n        <h2>Прыклад Use memo hook</h2>\n        <UseMemoHook />\n      </section>\n      <section>\n        <h2>Day Night Example: <DayNight dayMessage=\"Сёння дзень\" nightMessage=\"Зараз ноч\" /></h2>\n      </section>\n      <section>\n        <h2>Прыклад як змяніць url праграмна <button onClick={onGoToContactsClick}>Go to Contacts</button></h2>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n"],"names":["ChangeBackgroundButton","React","constructor","arguments","state","bgColor","handleChangeColor","this","setState","Math","floor","random","toString","padStart","render","_jsx","style","backgroundColor","padding","children","onClick","MessageChild","_ref","message","_jsxs","hasDigitsRegexp","MessageParent","input","setInput","useState","setMessage","isTouched","setIsTouched","isValid","setIsValid","showError","setShowError","handleInputChange","useCallback","e","newValue","target","value","validateInput","trimmedValue","trim","hasDigits","test","handleButtonClick","_Fragment","type","onChange","placeholder","onBlur","className","Timer","seconds","setSeconds","useEffect","console","log","interval","setInterval","prevSeconds","clearInterval","getPluralForm","ThemeSwitcher","theme","toggleTheme","useTheme","CounterActionType","counterReducer","action","count","Error","Counter","dispatch","useReducer","textAlign","fontSize","Increment","Decrement","Reset","UseMemoHook","setCount","otherCount","setOtherCount","memoizedValue","useMemo","DayNight","dayMessage","nightMessage","isDay","setIsDay","hour","Date","getHours","tasks","setTasks","inputRef","useRef","navigate","useNavigate","_inputRef$current","current","focus","ref","addTask","map","task","idx","removeTask","index","filter","_","i","onGoToContactsClick"],"sourceRoot":""}